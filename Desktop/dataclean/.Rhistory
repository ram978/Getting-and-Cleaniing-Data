install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?strsplit
x <- "Split the words in a sentence."
strsplit(x, " ")
x <- "Split at every character."
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURL(URL)
out <- read.csv(textConnection(x))
View(out)
names(out)
dim(out)
findnames<-names(out)
splitting<-strsplit(findnames, "wgtp")
splitting[[123]]
splitting[[180]]
clear()
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
x1 <- getURL(URL)
out1 <- read.csv(textConnection(x1))
View(out1)
names(out1)
gdp<-out1$X.3
mean(gdp)
gdp <- as.numeric(gsub(",", "", out1$x.3))
mean(gdp)
mean(gdp, na.rm = TRUE)
gdpURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
gdpFile <- "./data/GDP.csv"
download.file(gdpURL, gdpFile, method = "curl")
out1 <- out1[, c(1, 2, 4, 5)]
View(out1)
colnames(out1) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
mean(as.numeric(gsub(",", "", out1$GDP.Value)))
out1 <- read.csv(textConnection(x1), skip = 5, nrows = 190, stringsAsFactors = F, header = F)
out1 <- out1[, c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
colnames(out1) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
mean(as.numeric(gsub(",", "", out1$GDP.Value)))
?grep
length(grep("^United",gdpData$Country.Name))
grepl("^United", dtGDP$Long.Name)
grepl("^United", out1$Country.Name)
r<-grepl("^United", out1$Country.Name)
summary(r)
library(quantmod)
install.packages(quantmod)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
?Date
year(sampleTimes)
library(lubridate)
install.packages('lubridate')
library(lubricate)
library(lubridate)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
year(sampleTimes)
summary(sampleTimes)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
?addmargins
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
swirl()
skip()
deck
1/52
52
4/52
15/52
4/52
skip()
deck
12/52
2/51
0.6
.6
0.64
0.64/1
swuirl()
swirl()
swirl()
0.64
0.64
mydf
mypdf
integrate(mypdf, 0, 1.6)
skip()
skip()
skip()
skip()
swirl()
1/6
21/6
expect_dice()
expect_dice
?PMF
??PMF
dice_high
expect_dice(dice_high)
dice_low
expect_dice(dice_low)
edh+edl/2
.5*(edh+edl)
myfunc
integrate(myfunc,0,2)
spop
mean(apop)
mean(spop)
allsam
apply(allsam, 1, means)
apply(allsam, 1, mean)
smeans
mean(smeans)
dice_sqr
ex2_fair<-dice_fair
dice_fair
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
ex2_fair-3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
Poisson(4)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
6
swirl()
swirl()
swirl()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
(0.8)^3(0.2)^2
0.02048
0.43008
skip()
pbinom(2,5,.8,lower.tail = FALSE)
qnorm(0.6)
qnorm(.1)
0
qnorm(97.5, mean=3, sd=2)
qnorm(.975,mean=3,sd=2)
qnorm(.975,mean=3,sd=2)
1.96*2 + 3
pnorm(1200, mean=1020, sd=50, lower.tail = FALSE)
pnorm(1200, mean=1020, sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020, sd=50, lower.tail = TRUE)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,n*p)
ppois(5)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
swirl()
coinPlot
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
p'+/- qnorm(.975)*sqrt(p'(1-p')/100)
p'+qnorm(.975)*sqrt(p'(1-p')/100)
qnorm(.975)*sqrt(p'(1-p')/100)
skip()
x$conf.int
skip()
mywald(.2)
ACCompar(20)
lamb=3
lamb <- 5/94.32
mean + c(-1,1)*qnorm(.975)*sqrt(est var)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/2)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)x$conf
skip()
myplot(2)
myplot(20)
myplot2(2)
freedom(df)
skip()
myplot(20)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference=g1-g2
difference<-g1-g2
difference <- g2-g1
mean(difference)
s<-sd(difference)
0.95 +c(-1,1) t_(n-1)*s/sqrt(20)
0.95 +c(-1,1) t_(n-1)*s/sqrt(20)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
skip()
skip()
skip()
skip()
qt(.95)
skip()
fs
dim(fs)
skip()
skip()
mybin
skip()
skip()
skip()
qnorm(.99)
skip()
qnorm(.99)
pnorm(2,lower.tail=FALSE)
mybin
skip()
skip()
skip()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
swirl()
dataset_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(dataset_url, "dataset.zip")
unzip("diet_data.zip", exdir = "diet_data")
unzip("dataset.zip", exdir = "diet_data")
list.files("diet_data")
activity_labels <- read.table("diet_data/activity_labels.txt")
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
list.files("UCI HAR Dataset")
setwd()
getwd()
setwd("/Users/janakiramsundaraneedi/Downloads")
setwd("/Users/janakiramsundaraneedi/Downloads/UCI HAR Dataset")
subject_train <- read.table("subject_train.txt")
subject_test <- read.table("test/subject_test.txt")
X_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_train <- read.table("train/subject_train.txt")
X_train <- read.table("train/X_train.txt")
activity_labels <- read.table("activity_labels.txt")
View(activity_labels)
features <- read.table("features.txt")
View(features)
headers <- features[,2]
View(headers)
names(X_test) <- headers
X_test
View(X_test)
mean_and_std <- grepl("mean\\(\\)|std\\(\\)", headers)
View(mean_and_std)
X_test_mean_and_std <- X_test[,mean_and_std]
X_train_mean_and_std <- X_train[,mean_and_std]
View(X_test_mean_and_std)
View(X_test)
